<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="dashboard-domain-names-upgrades-configuration">
  <?dbhtml stop-chunking?>
    <title>Domain names, dashboard upgrades, and basic web server configuration</title>
    <section xml:id="dashboard-domain-names">
      <title>Domain names</title>
      <para>Many organizations typically deploy web applications at
        subdomains of an overarching organization domain. It is natural
        for users to expect a domain of the form
          <uri>openstack.example.org</uri>. In this context, there are
        often applications which are deployed in the same second-level
        namespace. This name structure is convenient and simplifies name
        server maintenance.</para>
      <para>We strongly recommend deploying dashboard to a
        <emphasis>second-level domain</emphasis>, such as
        <uri>https://example.com</uri>, rather than deploying
        dashboard on a <emphasis>shared subdomain</emphasis> of any level,
        for example <uri>https://openstack.example.org</uri> or
        <uri>https://horizon.openstack.example.org</uri>. We also
        advise against deploying to bare internal domains like
        <uri>https://horizon/</uri>. These recommendations are based on the
        limitations of browser same-origin-policy.</para>
      <para>Recommendations given in this guide cannot effectively guard against
        known attacks if you deploy the dashboard in a domain that also hosts
        user-generated content, even when this content resides on a separate
        sub-domain. User-generated content can consist of scripts, images, or uploads
        of any type. Most major web presences, including googleusercontent.com,
        fbcdn.com, github.io, and twimg.co, use this approach to segregate
        user-generated content from cookies and security tokens.</para>
      <para>If you do not follow this recommendation regarding
        second-level domains, avoid a cookie-backed session store and
        employ HTTP Strict Transport Security (HSTS). When deployed on
        a subdomain, the dashboard's security is equivalent to the least secure
        application deployed on the same second-level domain.</para>
    </section>
    <section xml:id="dashboard-basic-web-server-configuration">
      <title>Basic web server configuration</title>
      <para>The dashboard should be deployed as a Web Services Gateway
        Interface (WSGI) application behind an HTTPS proxy such as
        Apache or nginx. If Apache is not already in use, we recommend
        nginx since it is lightweight and easier to configure
        correctly.</para>
      <para>When using nginx, we recommend <link
        xlink:href="http://docs.gunicorn.org/en/latest/deploy.html"
        >gunicorn</link> as the WSGI host with an appropriate number
        of synchronous workers. When using Apache, we recommend
        <literal>mod_wsgi</literal> to host the dashboard.</para>
    </section>
    <section xml:id="dashboard-allowed-hosts">
      <title>Allowed hosts</title>
      <para>Configure the <option>ALLOWED_HOSTS</option> setting with
        the domain or domains where the dashboard is available. Failure
        to configure this setting (especially if not following the
        recommendation above regarding second level domains) opens the
        dashboard to a number of serious attacks. Wild card domains
        should be avoided.</para>
      <para>For further details, see the <link
          xlink:href="https://docs.djangoproject.com/"
          >Django documentation</link>.</para>
    </section>
    <section xml:id="dashboard-horizon-image-upload">
      <title>Horizon image upload</title>
      <para>We recommend that implementers <link
          xlink:href="http://docs.openstack.org/developer/horizon/topics/deployment.html#file-uploads"
          >disable HORIZON_IMAGES_ALLOW_UPLOAD</link> unless they have
        implemented a plan to prevent resource exhaustion and denial of
        service.</para>
    </section>
</section>
