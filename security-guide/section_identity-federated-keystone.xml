<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0"
         xml:id="section_identity-federated-keystone">
  <?dbhtml stop-chunking?>
    <title>Federated Identity</title>
    <para><glossterm  baseform="federated identity">Federated Identity</glossterm>
      is a mechanism to establish trusts between Identity Providers and
      Service Providers (SP), in this case, between Identity Providers and
      the services provided by an OpenStack Cloud.</para>
    <para>Federated Identity provides a way to securely use existing credentials
      to access cloud resources such as servers, volumes, and databases,
      across multiple endpoints provided in multiple authorized clouds using a
      single set of credentials, without having to provision additional identities
      or log in multiple times. The credential is maintained by the user's
      Identity Provider.</para>
    <para>Some important definitions:</para>
    <variablelist>
      <varlistentry>
        <term><glossterm  baseform="service provider">Service Provider</glossterm> (SP)</term>
        <listitem><para>A system entity that provides services to principals or
            other system entities, in this case, OpenStack Identity is the
            Service Provider.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><glossterm  baseform="identity provider">Identity Provider</glossterm> (IdP)</term>
        <listitem><para>A directory service, such as LDAP, RADIUS and Active
         Directory, which allows users to login with a user name and password,
         is a typical source of authentication tokens (e.g. passwords) at an
         identity provider.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><glossterm>SAML assertion</glossterm></term>
        <listitem><para>Contains information about a user as provided
            by an IdP. It is an indication that a user has been authenticated.
          </para></listitem>
      </varlistentry>
      <varlistentry>
        <term>Mapping</term>
        <listitem><para>Adds a set of rules to map Federation protocol
            attributes to Identity API objects. An Identity Provider has exactly
            one mapping specified per protocol.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>Protocol</term>
        <listitem><para>Contains information that dictates which Mapping
            rules to use for an incoming request made by an IdP. An IdP may support
            multiple protocols. There are three major protocols for federated
            identity: OpenID, SAML, and OAuth.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><glossterm baseform="unscoped token">Unscoped token</glossterm></term>
        <listitem><para>Allows a user to authenticate with the Identity
            service to exchange the unscoped token for a scoped token, by providing
            a project ID or a domain ID.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><glossterm baseform="scoped token">Scoped token</glossterm></term>
        <listitem><para>Allows a user to use all OpenStack services
            apart from the Identity service.</para></listitem>
      </varlistentry>
    </variablelist>
      <section xml:id="section_identity-federated-overview">
        <title>Why use Federated Identity?</title>
        <itemizedlist>
          <listitem><para>Provisioning new identities often incurs some security
           risk. It is difficult to secure credential storage and to deploy it
           with proper policies. A common identity store is useful as it can be
           set up properly once and used in multiple places. With Federated Identity,
           there is no longer a need to provision user entries in Identity service,
           since the user entries already exist in the IdP's databases.</para>
            <para>This does introduce new challenges around protecting that
             identity. However, this is a worthwhile tradeoff given the greater
             control, and fewer credential databases that come with a centralized
             common identity store.</para>
            </listitem>
        <listitem><para>It is a burden on the clients to deal with multiple tokens
            across multiple cloud service providers. Federated Identity provides
            single sign on to the user, who can use the credentials provided and
            maintained by the user's IdP to access many different services on
            the Internet.</para></listitem>
        <listitem><para>Users spend too much time logging in or going through
            'Forget Password' workflows. Federated identity allows for single sign
             on, which is easier and faster for users and requires fewer password
             resets. The IdPs manage user identities and passwords so OpenStack
             does not have to.</para></listitem>
        <listitem><para>Too much time is spent administering identities in various
            service providers.</para></listitem>
        <listitem><para>The best test of interoperability in the cloud is the
         ability to enable a user with one set of credentials in an IdP to access
          multiple cloud services. Organizations, each using its own IdP can easily
          allow their users to collaborate and quickly share the same cloud
          services.</para></listitem>
        <listitem><para>Removes a blocker to cloud brokering and multi-cloud
            workload management. There is no need to build additional authentication
            mechanisms ito authenticate users, since the IdPs take care of authenticating
            their own users using whichever technologies they deem to be appropriate.
            In most organizations, multiple authentication technologies are already in use.</para></listitem>
      </itemizedlist>
      </section>
      <section xml:id="section-identity-configuring-identity-for-federation">
        <title>Configuring Identity service for Federation</title>
        <para>Federated users are not mirrored in the Identity service back end
         (for example, using the SQL driver). The external IdP is responsible for
          authenticating users, and communicates the result of the authentication
          to Identity service using SAML assertions. Identity service maps the
          SAML assertions to keystone user groups and assignments created in
          Identity service.</para>
        <section xml:id="section_identity-enabling-federation">
          <title>Enabling Federation</title>
          <para>To enable Federation, perform the following steps:</para>
            <procedure>
              <step><para>Run the Identity service under Apache, instead of using
                <command>keystone-all</command>.</para>
                <substeps>
                  <step><para>Enable SSL support. Install <literal>mod_nss</literal>
                   according to your distribution, then apply the following patch
                   and restart HTTPD:</para>
<programlisting>--- /etc/httpd/conf.d/nss.conf.orig 2012-03-29 12:59:06.319470425 -0400
+++ /etc/httpd/conf.d/nss.conf      2012-03-29 12:19:38.862721465 -0400
@@ -17,7 +17,7 @@
# Note: Configurations that use IPv6 but not IPv4-mapped addresses need two
#       Listen directives: "Listen [::]:8443" and "Listen 0.0.0.0:443"
#
-Listen 8443
+Listen 443

##
##  SSL Global Context
@@ -81,7 +81,7 @@
## SSL Virtual Host Context
##

-&lt;virtualhost _default_:8443="">
+&lt;virtualhost _default_:443="">

#   General setup for the virtual host
 #DocumentRoot "/etc/httpd/htdocs"
&lt;/virtualhost>&lt;/virtualhost></programlisting>
                  </step>
                  <step><para>If you have a firewall in place, configure it to
                   allow SSL traffic. For example:</para>
<programlisting>-A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT</programlisting>
                    <para>Note this needs to be added before your reject all rule which might be:</para>
<programlisting>-A INPUT -j REJECT --reject-with icmp-host-prohibited</programlisting>
                  </step>
                  <step><para>Copy the <filename>httpd/wsgi-keystone.conf</filename>
                      file to the appropriate location for your Apache server,
                      for example, <filename>/etc/httpd/conf.d/wsgi-keystone.conf
                        </filename> file.</para>
                  </step>
                  <step><para>Create the directory <literal>/var/www/cgi-bin/keystone/</literal>.
                      Then link the files <literal>main</literal> and <literal>admin</literal>
                      to the <filename>keystone.py</filename> file in this directory.</para>
                    <para>For a distribution appropriate place, it should probably be copied to
                      <literal>/usr/share/openstack/keystone/httpd/keystone.py</literal>.</para>
                      <note><para>This path is Ubuntu-specific. For other
                       distributions, replace with appropriate path.</para></note>
                  </step>
                  <step><para>If you are running with SELinux enabled ensure
                      that the file has the appropriate SELinux context to access
                      the linked file. For example, if you have the file in
                      <literal>/var/www/cgi-bin</literal> location, you can do
                      this by running:</para>
<screen><prompt>#</prompt> <userinput>restorecon /var/www/cgi-bin</userinput></screen>
                      <para>Adding it in a different location requires you set up
                      your SELinux policy accordingly.</para>
                  </step>
                  <step><para>Make sure you use either the SQL or the <literal>memcached</literal>
                      driver for tokens, otherwise the tokens will not be shared
                      between the processes of the Apache HTTPD server.</para>
                    <para>For SQL, in <filename>/etc/keystone/keystone.conf</filename>
                      , set:</para>
<programlisting language="ini">[token]
driver = keystone.token.backends.sql.Token</programlisting>
                    <para>For <literal>memcached</literal>, in
                    <filename>/etc/keystone/keystone.conf</filename>, set:</para>
<programlisting language="ini">[token]
driver = keystone.token.backends.memcache.Token</programlisting>
                    <para>In both cases, all servers that are storing tokens need
                      a shared back end. This means either that both point to the
                      same database server, or both point to a common memcached
                      instance.</para>
                  </step>
                  <step><para>Install Shibboleth:</para>
<screen><prompt>#</prompt> <userinput>apt-get install libapache2-mod-shib2</userinput></screen>
                  <note><para>The <literal>apt-get</literal> command is Ubuntu
                   specific. For other distributions, replace with appropriate
                   command.</para></note></step>
                  <step><para>Configure the Identity service virtual host and
                      adjust the config to properly handle SAML2 workflow.</para>
                    <para>Add <literal>WSGIScriptAlias</literal> directive to your vhost configuration:</para>
<programlisting>WSGIScriptAliasMatch ^(/v3/OS-FEDERATION/identity_providers/.*?/protocols/.*?/auth)$ /var/www/keystone/main/$1</programlisting>
                  </step>
                  <step><para>Add two <literal>&lt;Location></literal> directives
                to the <filename>wsgi-keystone.conf</filename> file:</para>
<programlisting>&lt;Location /Shibboleth.sso>
SetHandler shib
&lt;/Location>

&lt;LocationMatch /v3/OS-FEDERATION/identity_providers/.*?/protocols/saml2/auth>
ShibRequestSetting requireSession 1
AuthType shibboleth
ShibRequireAll On
ShibRequireSession On
ShibExportAssertion Off
Require valid-user
&lt;/LocationMatch></programlisting>
                  <note><para>The option <literal>saml2</literal> may be different in your
                      deployment, but do not use a wildcard value. Otherwise every
                      Federated protocol will be handled by Shibboleth.</para>
                    <para>The <literal>ShibRequireSession</literal> rule is invalid
                      in Apache 2.4 or newer and should be dropped in that specific setup.</para></note>
                  </step>
                  <step><para>Enable the Identity service virtual host:</para>
<screen><prompt>#</prompt> <userinput>a2ensite wsgi-keystone.conf</userinput></screen>
                  </step>
                  <step><para>Enable the <literal>ssl</literal> and <literal>shib2</literal>
                      modules:</para>
<screen><prompt>#</prompt> <userinput>a2enmod ssl</userinput>
<prompt>#</prompt> <userinput>a2enmod shib2</userinput></screen>
                  </step>
                  <step><para>Restart Apache:</para>
<screen><prompt>#</prompt> <userinput>service apache2 restart</userinput></screen>
                    <note><para>The <literal>service apache2 restart</literal>
                    command is Ubuntu-specific. For other distributions, replace
                    with appropriate command.</para></note>
                  </step>
                </substeps>
              </step>
              <step><para>Configure Apache to use a Federation capable authentication
                method.</para>
                <substeps>
                  <step><para>Once you have your Identity service virtual host ready,
                      configure Shibboleth and upload your metadata to the Identity Provider.</para>
                    <para>If new certificates are required, they can be easily created by executing:</para>
<screen><prompt>$</prompt> <userinput>shib-keygen -y <replaceable>NUMBER_OF_YEARS</replaceable></userinput></screen>
                    <para>The newly created file will be stored under
                      <filename>/etc/shibboleth/sp-key.pem</filename></para>
                  </step>
                  <step><para>Upload your Service Provider’s metadata file to your
                      Identity Provider.</para>
                  </step>
                  <step><para>Configure your Service Provider by editing
                      <filename>/etc/shibboleth/shibboleth2.xml</filename>.</para>
                    <para>For more information, see <link xlink:href="https://wiki.shibboleth.net/confluence/display/SHIB2/Configuration">
                        <citetitle>Shibboleth Service Provider Configuration</citetitle></link>.</para>
                  </step>
                  <step><para>Identity service enforces <literal>external</literal>
                      authentication when environment variable <literal>REMOTE_USER</literal>
                      is present so make sure Shibboleth does not set the
                      <literal>REMOTE_USER</literal> environment variable. To do
                      so, scan through the <filename>/etc/shibboleth/shibboleth2.xml</filename>
                      configuration file and remove the <literal>REMOTE_USER</literal>
                      directives.</para>
                  </step>
                  <step><para>Examine your attributes map in the
                      <filename>/etc/shibboleth/attributes-map.xml</filename> file
                      and adjust your requirements if needed. For more information
                      see <link xlink:href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPAddAttribute">
                        <citetitle>Shibboleth Attributes</citetitle></link>.</para>
                  </step>
                  <step><para>Restart the Shibboleth daemon:</para>
<screen><prompt>#</prompt> <userinput>service shibd restart</userinput>
<prompt>#</prompt> <userinput>service apache2 restart</userinput></screen>
                  </step>
                </substeps>
              </step>
              <step><para>Enable <literal>OS-FEDERATION</literal> extension:</para>
                <substeps>
                  <step><para>Add the Federation extension driver to the
                      <literal>[federation]</literal> section in the <filename>keystone.conf</filename>
                      file. For example:</para>
<programlisting language="ini">[federation]
driver = keystone.contrib.federation.backends.sql.Federation</programlisting>
                  </step>
                  <step><para>Add the saml2 authentication method to the
                    <literal>[auth]</literal> section in <filename>keystone.conf</filename>
                    file:</para>
<programlisting language="ini">[auth]
methods = external,password,token,saml2
saml2 = keystone.auth.plugins.saml2.Saml2</programlisting>
                      <note><para>The <literal>external</literal> method should be
                          dropped to avoid any interference with some Apache and Shibboleth
                          SP setups, where a <literal>REMOTE_USER</literal> environment variable is
                          always set, even as an empty value.</para></note>
                  </step>
                  <step><para>Add the <literal>federation_extension</literal>
                      middleware to the <literal>api_v3</literal> pipeline in the
                      <filename>keystone-paste.ini</filename> file. For example:</para>
<programlisting language="ini">[pipeline:api_v3]
pipeline = access_log sizelimit url_normalize token_auth admin_token_auth
xml_body json_body ec2_extension s3_extension federation_extension
service_v3</programlisting>
                  </step>
                  <step><para>Create the Federation extension tables if using the provided SQL back end. For example:</para>
<screen><prompt>$</prompt> <userinput>keystone-manage db_sync --extension federation</userinput></screen>
                  </step>
                </substeps>
                </step>
            </procedure>
            <para>Ideally, to test that the Identity Provider and the Identity
           service are communicating, navigate to the protected URL and attempt
           to sign in. If you get a response back from keystone,
           even if it is a wrong response, indicates the communication.</para>
        </section>
        <section xml:id="section_identity-federated-config">
          <title>Configuring Federation</title>
          <para>Now that the Identity Provider and Identity service are communicating,
           you can start to configure the <literal>OS-FEDERATION</literal> extension.</para>
          <procedure>
            <step><para>Create Identity groups and assign roles.</para>
              <para>No new users will be added to the Identity back end, but the Identity
                service requires group-based role assignments to authorize federated
                users. The Federation mapping function will map the user into local
                Identity service groups objects, and hence to local role
                assignments.</para>
              <para>Thus, it is required to create the necessary Identity service
                groups that correspond to the Identity Provider’s groups; additionally,
                these groups should be assigned roles on one or more projects or
                domains. For example, groups here refers to the Identity service
                groups that should be created so that when mapping from the SAML
                attribute <literal>Employees</literal>, you can map it to a
                Identity service group <literal>devs</literal>.</para>
                <para>The Identity service administator can create as many groups
                 as there are SAML attributes, whatever the mapping calls for.</para></step>
            <step><para>Add Identity Providers, Mappings and Protocols.</para>
              <para>To utilize Federation, create the following in the Identity service:
                Identity Provider, Mapping, Protocol.</para></step>
          </procedure>
        </section>
        <section xml:id="section_identity-federated-authentication">
          <title>Performing Federation authentication</title>
          <procedure>
            <step><para>Authenticate externally and generate an unscoped token in
              Identity service.</para>
            <para>To start Federated authentication a user must access the dedicated
              URL with Identity Provider’s and Protocol’s identifiers stored within
              a protected URL. The URL has a format of:
              <literal>/v3/OS-FEDERATION/identity_providers/{identity_provider}/protocols/{protocol}/auth</literal>.</para>
            <para>This instance follows a standard SAML2 authentication procedure,
              that is, the user will be redirected to the Identity Provider’s
              authentication webpage and be prompted for credentials. After successfully
              authenticating the user will be redirected to the Service Provider’s
              endpoint. If using a web browser, a token will be returned in XML format.
              As an alternative to using a web browser, you can use Enhanced Client
              or Proxy (ECP), which is available in the <literal>keystoneclient</literal>
              in the Identity service API.</para>
            <para>In the returned unscoped token, a list of Identity service groups
              the user belongs to will be included.</para>
            <para>For example, the following URL would be considered protected
              by <literal>mod_shib</literal> and Apache, as such a request made
              to the URL would be redirected to the Identity Provider, to start
              the SAML authentication procedure.</para>
<screen><prompt>#</prompt> <userinput>curl -X GET \
-D - http://localhost:5000/v3/OS-FEDERATION/identity_providers/{identity_provider}/protocols/{protocol}/auth</userinput></screen>
              <note><para>It is assumed that the <literal>keystone</literal> service
               is running on port <literal>5000</literal>.</para></note>
            </step>
            <step><para>Determine accessible resources.</para>
              <para>By using the previously returned token, the user can issue
                requests to the list projects and domains that are accessible.</para>
              <itemizedlist>
                <listitem><para>List projects a federated user can access:
                    <literal>GET /OS-FEDERATION/projects</literal>
                    </para></listitem>
                <listitem><para>List domains a federated user can access:
                    <literal>GET /OS-FEDERATION/domains</literal></para></listitem>
              </itemizedlist>
              <para>For example,</para>
<screen><prompt>#</prompt> <userinput>curl -X GET \
-H "X-Auth-Token: &lt;unscoped token>" http://localhost:5000/v3/OS-FEDERATION/projects</userinput></screen>
          <para>or</para>
<screen><prompt>#</prompt> <userinput>curl -X GET \
-H "X-Auth-Token: &lt;unscoped token>" http://localhost:5000/v3/OS-FEDERATION/domains</userinput></screen></step>
            <step><para>Get a scoped token.</para>
              <para>A federated user may request a scoped token, by using the
                unscoped token. A project or domain may be specified by either
                ID or name. An ID is sufficient to uniquely identify a project
                or domain. For example,</para>
<screen><prompt>#</prompt> <userinput>curl -X POST \
-H "Content-Type: application/json" \
-d '{"auth":{"identity":{"methods":["saml2"],"saml2":{"id":"&lt;unscoped_token_id>"}},"scope":{"project":{"domain": {"name": "Default"},"name":"service"}}}}' \
-D - http://localhost:5000/v3/auth/tokens</userinput></screen></step>
          </procedure>
        </section>
      </section>
      <section xml:id="section_federated-config-options">
        <title>Setting Identity service as Identity Provider</title>
        <section xml:id="section_configuration-options">
          <title>Configuration options</title>
        <para>Before attempting to federate multiple Identity service deployments,
         you must setup certain configuration options in the <filename>keystone.conf</filename>
         file.</para>
        <para>Within the <filename>keystone.conf</filename> assign values to the
         <literal>[saml]</literal> related fields, for example:</para>
<programlisting language="ini">[saml]
certfile=/etc/keystone/ssl/certs/ca.pem
keyfile=/etc/keystone/ssl/private/cakey.pem
idp_entity_id=https://keystone.example.com/v3/OS-FEDERATION/saml2/idp
idp_sso_endpoint=https://keystone.example.com/v3/OS-FEDERATION/saml2/sso
idp_metadata_path=/etc/keystone/saml2_idp_metadata.xml</programlisting>
        <para>It is recommended that the following <literal>Organization</literal>
         configuration options be setup.</para>
<programlisting language="ini">
idp_organization_name=example_company
idp_organization_display_name=Example Corp.
idp_organization_url=example.com</programlisting>
        <para>It is also recommended the following <literal>Contact</literal>
         options are set.</para>
<programlisting language="ini">
idp_contact_company=example_company
idp_contact_name=John
idp_contact_surname=Smith
idp_contact_email=jsmith@example.com
idp_contact_telephone=555-55-5555
idp_contact_type=technical</programlisting>
      </section>
      <section xml:id="section-get-metadata">
        <title>Generate metadata</title>
        <para>In order to create a trust between the Identity Provider and the
         Service Provider, metadata must be exchanged. To create metadata for
         your Identity service, run the <command>keystone-manage</command>
         command and pipe the output to a file. For example:</para>
<screen><prompt>$</prompt> <userinput>keystone-manage saml_idp_metadata > /etc/keystone/saml2_idp_metadata.xml</userinput></screen>
        <note><para>The file location should match the value of the configuration
         option <option>idp_metadata_path</option> that was assigned in the list
         of <literal>[saml]</literal> updates.</para></note>
      </section>
      <section xml:id="section_service-provider-region">
        <title>Create a region for the Service Provider</title>
        <para>Create a new region for the service provider, for example, create
         a new region with an <literal>ID</literal> of <replaceable>BETA</replaceable>,
         and <literal>URL</literal> of <replaceable>https://beta.com/Shibboleth.sso/SAML2/POST</replaceable>.
         This URL will be used when creating a SAML assertion for <replaceable>BETA</replaceable>,
         and signed by the current keystone Identity Provider.</para>
<screen><prompt>$</prompt> <userinput>curl -s -X PUT \
  -H "X-Auth-Token: $OS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"region": {"url": "<replaceable>http://beta.com/Shibboleth.sso/SAML2/POST</replaceable>"}}' \
  http://localhost:5000/v3/regions/<replaceable>BETA</replaceable> | python -mjson.tool</userinput></screen>
      </section>
      <section xml:id="section-testing-federated-identity">
        <title>Testing it all out</title>
        <para>Lastly, if a scoped token and a Service Provider region are presented
         to keystone, the result will be a full SAML Assertion, signed by the IdP
         keystone, specifically intended for the Service Provider keystone.</para>
<screen><prompt>$</prompt> <userinput>curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{"auth": {"scope": {"region": {"id": "<replaceable>BETA</replaceable>"}}, "identity": {"token": {"id": "<replaceable>d793d935b9c343f783955cf39ee7dc3c</replaceable>"}, "methods": ["token"]}}}' \
  http://localhost:5000/v3/auth/OS-FEDERATION/saml2</userinput></screen>
        <para>At this point the SAML Assertion can be sent to the Service Provider
         keystone, and a valid OpenStack token, issued by a Service Provider keystone,
         will be returned.</para>
      </section>
    </section>
    <section xml:id="section-federated-future">
      <title>Future</title>
      <para>Currently, the CLI supports the Enhanced Client or Proxy (ECP),
       (the non-browser) support for <literal>keystoneclient</literal> from an
       API perspective. So, if you are using the <literal>keystoneclient</literal>,
       you can create a client instance and use the SAML authorization plugin.
       There is no support for dashboard available presently. With the upcoming
       OpenStack releases, Federated Identity should be supported with both CLI
       and the dashboard.</para>
    </section>
  </section>
