<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="messaging-security">
  <?dbhtml stop-chunking?>
    <title>Messaging security</title>
    <para>
      This section discusses security hardening approaches for the
      three most common message queuing solutions used in OpenStack:
      RabbitMQ, Qpid, and ZeroMQ.
    </para>
    <section xml:id="messaging-security-messaging-transport-security">
      <title>Messaging transport security</title>
      <para>
        AMQP based solutions (Qpid and RabbitMQ) support
        transport-level security using TLS. ZeroMQ messaging does not
        natively support TLS, but transport-level security is possible
        using labelled IPsec or CIPSO network labels.
      </para>
      <para>
        We highly recommend enabling transport-level cryptography for
        your message queue. Using TLS for the messaging client
        connections provides protection of the communications from
        tampering and eavesdropping in-transit to the messaging
        server. Below is guidance on how TLS is typically configured
        for the two popular messaging servers Qpid and RabbitMQ. When
        configuring the trusted certificate authority (CA) bundle that
        your messaging server uses to verify client connections, it is
        recommended that this be limited to only the CA used for your
        nodes, preferably an internally managed CA. The bundle of
        trusted CAs will determine which client certificates will be
        authorized and pass the client-server verification step of the
        setting up the TLS connection. Note, when installing the
        certificate and key files, ensure that the file permissions
        are restricted, for example using <command>chmod 0600</command>,
        and the ownership is
        restricted to the messaging server daemon user to prevent
        unauthorized access by other processes and users on the
        messaging server.
      </para>
      <section xml:id="messaging-security-messaging-transport-security-rabbitmq-server-ssl-configuration">
        <title>RabbitMQ server SSL configuration</title>
        <para>The following lines should be added to the system-wide
        RabbitMQ configuration file, typically
        <filename>/etc/rabbitmq/rabbitmq.config</filename>:
        </para>
        <programlisting>[
  {rabbit, [
     {tcp_listeners, [] },
     {ssl_listeners, [{"&lt;IP address or hostname of management network interface&gt;", 5671}] },
     {ssl_options, [{cacertfile,"/etc/ssl/cacert.pem"},
                    {certfile,"/etc/ssl/rabbit-server-cert.pem"},
                    {keyfile,"/etc/ssl/rabbit-server-key.pem"},
                    {verify,verify_peer},
                    {fail_if_no_peer_cert,true}]}
   ]}
].</programlisting>
        <para>Note, the <literal>tcp_listeners</literal> option is set
        to <literal>[]</literal> to prevent it from listening an on
        non-SSL port. The <literal>ssl_listeners</literal> option
        should be restricted to only listen on the management network
        for the services.</para>
        <para>For more information on RabbitMQ SSL configuration see:</para>
        <itemizedlist><listitem>
            <para>
              <link xlink:href="http://www.rabbitmq.com/configure.html">RabbitMQ Configuration</link>
            </para>
          </listitem>
<listitem>
            <para><link xlink:href="http://www.rabbitmq.com/ssl.html">RabbitMQ SSL</link></para>
          </listitem>
</itemizedlist>
      </section>
      <section xml:id="messaging-security-messaging-transport-security-qpid-server-ssl-configuration">
        <title>Qpid server SSL configuration</title>
        <para>The Apache Foundation has a messaging security guide for Qpid. See:</para>
        <itemizedlist><listitem>
            <para><link xlink:href="http://qpid.apache.org/releases/qpid-0.32/cpp-broker/book/chap-Messaging_User_Guide-Security.html#sect-Messaging_User_Guide-Security-Encryption_using_SSL">Apache Qpid SSL</link></para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section xml:id="messaging-security-queue-authentication-and-access-control">
      <title>Queue authentication and access control</title>
      <para>
        RabbitMQ and Qpid offer authentication and access control
        mechanisms for controlling access to queues. ZeroMQ offers no
        such mechanisms.
      </para>
      <para>
        Simple Authentication and Security Layer (SASL) is a framework
        for authentication and data security in Internet
        protocols. Both RabbitMQ and Qpid offer SASL and other
        pluggable authentication mechanisms beyond simple user names
        and passwords that allow for increased authentication
        security. While RabbitMQ supports SASL, support in OpenStack
        does not currently allow for requesting a specific SASL
        authentication mechanism. RabbitMQ support in OpenStack allows
        for either user name and password authentication over an
        unencrypted connection or user name and password in
        conjunction with X.509 client certificates to establish the
        secure TLS connection.
      </para>
      <para>
        We recommend configuring X.509 client certificates on all the
        OpenStack service nodes for client connections to the
        messaging queue and where possible (currently only Qpid)
        perform authentication with X.509 client certificates. When
        using user names and passwords, accounts should be created
        per-service and node for finer grained auditability of access
        to the queue.
      </para>
      <para>
        Before deployment, consider the TLS libraries that the queuing
        servers use. Qpid uses Mozilla's NSS library, whereas RabbitMQ
        uses Erlang's TLS module which uses OpenSSL.</para>
      <section xml:id="messaging-security-queue-authentication-and-access-control-authentication-configuration-example-rabbitmq">
        <title>Authentication configuration example: RabbitMQ</title>
        <para>On the RabbitMQ server, delete the default
        <literal>guest</literal> user:</para>
        <screen><prompt>#</prompt> <userinput>rabbitmqctl delete_user quest</userinput></screen>
        <para>On the RabbitMQ server, for each OpenStack service or
        node that communicates with the message queue set up user
        accounts and privileges:</para>
        <screen><prompt>#</prompt> <userinput>rabbitmqctl add_user compute01 <replaceable>RABBIT_PASS</replaceable></userinput>
<prompt>#</prompt> <userinput>rabbitmqctl set_permissions compute01 ".*" ".*" ".*"</userinput></screen>
        <para>Replace <replaceable>RABBIT_PASS</replaceable> with a suitable password.</para>
        <para>For additional configuration information see:</para>
        <itemizedlist><listitem>
            <para><link xlink:href="http://www.rabbitmq.com/access-control.html">RabbitMQ Access Control</link></para>
          </listitem>
<listitem>
            <para><link xlink:href="http://www.rabbitmq.com/authentication.html">RabbitMQ Authentication</link></para>
          </listitem>
<listitem>
            <para><link xlink:href="http://www.rabbitmq.com/plugins.html">RabbitMQ Plugins</link></para>
          </listitem>
<listitem>
            <para><link xlink:href="http://hg.rabbitmq.com/rabbitmq-auth-mechanism-ssl/file/rabbitmq_v3_1_3/README">RabbitMQ SASL External Auth</link></para>
          </listitem>
</itemizedlist>
      </section>
      <section xml:id="messaging-security-queue-authentication-and-access-control-openstack-service-configuration-rabbitmq">
        <title>OpenStack service configuration: RabbitMQ</title>
        <programlisting language="ini">[DEFAULT]
rpc_backend=nova.openstack.common.rpc.impl_kombu
rabbit_use_ssl=True
rabbit_host=
rabbit_port=5671
rabbit_user=compute01
rabbit_password=<replaceable>RABBIT_PASS</replaceable>
kombu_ssl_keyfile=/etc/ssl/node-key.pem
kombu_ssl_certfile=/etc/ssl/node-cert.pem
kombu_ssl_ca_certs=/etc/ssl/cacert.pem</programlisting>
      </section>
      <section xml:id="messaging-security-queue-authentication-and-access-control-authentication-configuration-example-qpid">
        <title>Authentication configuration example: Qpid</title>
        <para>For configuration information see:</para>
        <itemizedlist><listitem>
            <para><link xlink:href="http://qpid.apache.org/releases/qpid-0.32/cpp-broker/book/chap-Messaging_User_Guide-Security.html#sect-Messaging_User_Guide-Security-User_Authentication">Apache Qpid Authentication</link></para>
          </listitem>
<listitem>
            <para><link xlink:href="http://qpid.apache.org/releases/qpid-0.32/cpp-broker/book/chap-Messaging_User_Guide-Security.html#sect-Messaging_User_Guide-Security-Authorization">Apache Qpid Authorization</link></para>
          </listitem>
</itemizedlist>
      </section>
      <section xml:id="messaging-security-queue-authentication-and-access-control-openstack-service-configuration-qpid">
        <title>OpenStack service configuration: Qpid</title>
        <programlisting language="ini">
[DEFAULT]
rpc_backend=nova.openstack.common.rpc.impl_qpid
qpid_protocol=ssl
qpid_hostname=&lt;IP or hostname of management network interface of messaging server&gt;
qpid_port=5671
qpid_username=compute01
qpid_password=<replaceable>QPID_PASS</replaceable></programlisting>
        <para>Optionally, if using SASL with Qpid specify the SASL mechanisms in use by adding:</para>
        <programlisting language="ini">qpid_sasl_mechanisms=&lt;space separated list of SASL mechanisms to use for auth&gt;</programlisting>
      </section>
    </section>
    <section xml:id="messaging-security-message-queue-process-isolation-and-policy">
      <title>Message queue process isolation and policy</title>
      <para>
        Each project provides a number of services which send and
        consume messages. Each binary which sends a message is
        expected to consume messages, if only replies, from the queue.
      </para>
      <para>
        Message queue service processes should be isolated from each
        other and other processes on a machine.
      </para>
      <section xml:id="messaging-security-message-queue-process-isolation-and-policy-namespaces">
        <title>Namespaces</title>
        <para>
          Network namespaces are highly recommended for all services
          running on OpenStack Compute Hypervisors. This will help
          prevent against the bridging of network traffic between VM
          guests and the management network.
        </para>
        <para>
          When using ZeroMQ messaging, each host must run at least one
          ZeroMQ message receiver to receive messages from the network
          and forward messages to local processes through IPC. It is
          possible and advisable to run an independent message
          receiver per project within an IPC namespace, along with
          other services within the same project.</para>
      </section>
      <section xml:id="messaging-security-message-queue-process-isolation-and-policy-network-policy">
        <title>Network policy</title>
        <para>
          Queue servers should only accept connections from the
          management network. This applies to all
          implementations. This should be implemented through
          configuration of services and optionally enforced through
          global network policy.
        </para>
        <para>
          When using ZeroMQ messaging, each project should run a
          separate ZeroMQ receiver process on a port dedicated to
          services belonging to that project. This is equivalent to
          the AMQP concept of control exchanges.
        </para>
      </section>
      <section xml:id="messaging-security-message-queue-process-isolation-and-policy-mandatory-access-controls">
        <title>Mandatory access controls</title>
        <para>
          Use both mandatory access controls (MACs) and discretionary
          access controls (DACs) to restrict the configuration for
          processes to only those processes. This restriction prevents
          these processes from being isolated from other processes
          that run on the same machine(s).
        </para>
      </section>
    </section>
</section>
